services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: family-planner-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-familyplanner}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-familyplanner123}
      POSTGRES_DB: ${POSTGRES_DB:-family_planner}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-familyplanner}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-planner-backend
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://familyplanner:familyplanner123@postgres:5432/family_planner?schema=public}
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      PORT: ${PORT:-3001}
      NODE_ENV: ${NODE_ENV:-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      APP_NAME: ${APP_NAME:-Family Planner}
      APP_URL: ${APP_URL:-http://localhost:3000}
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    volumes:
      - ./backend/public/images:/app/public/images
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
    container_name: family-planner-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
